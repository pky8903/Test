"ID","Process ID","Process Name","Host Name","Kernel Name","Kernel Time","Context","Stream","Section Name","Metric Name","Metric Unit","Metric Value","Rule Name","Rule Type","Rule Description"
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","7.29",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.32",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","26,378,162",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","GPU Speed Of Light Throughput","Memory [%]","%","91.00",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","GPU Speed Of Light Throughput","DRAM Throughput","%","29.57",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","GPU Speed Of Light Throughput","Duration","msecond","19.99",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","91.21",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","GPU Speed Of Light Throughput","L2 Cache Throughput","%","20.07",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","GPU Speed Of Light Throughput","SM Active Cycles","cycle","26,318,307.04",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","GPU Speed Of Light Throughput","Compute (SM) [%]","%","72.80",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing L1 in the Memory Workload Analysis section."
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved 2% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.80",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.80",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Compute Workload Analysis","Issue Slots Busy","%","20.12",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.80",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Compute Workload Analysis","SM Busy","%","24.34",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","ComputeWorkloadAnalysis","","","","HighPipeUtilization","WRN","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details."
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Memory Workload Analysis","Memory Throughput","Gbyte/second","103.51",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Memory Workload Analysis","Mem Busy","%","91.00",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Memory Workload Analysis","Max Bandwidth","%","72.80",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Memory Workload Analysis","L1/TEX Hit Rate","%","86.61",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Memory Workload Analysis","L2 Compression Ratio","","0",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Memory Workload Analysis","L2 Hit Rate","%","28.53",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Memory Workload Analysis","Mem Pipes Busy","%","72.80",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Scheduler Statistics","One or More Eligible","%","20.10",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Scheduler Statistics","Issued Warp Per Scheduler","","0.20",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Scheduler Statistics","No Eligible","%","79.90",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Scheduler Statistics","Active Warps Per Scheduler","warp","3.99",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.27",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.0 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 3.99 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 4.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","19.84",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","19.84",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Warp State Statistics","Avg. Active Threads Per Warp","","16",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","15.98",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 13.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture, rtcore) operation. This represents about 69.6% of the total average of 19.8 cycles between issuing two instructions. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality or by changing the cache configuration, and consider moving frequently used data to registers and to shared memory."
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","WarpStateStats","","","","CPIStall","INF","Check the Source Counters section for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides more details on each stall reason."
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","WarpStateStats","","","","ThreadDivergence","WRN","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 16.0 threads being active per cycle. This is further reduced to 16.0 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible. In addition, ensure your kernel makes use of Independent Thread Scheduling, which allows a warp to reconverge after a data-dependent conditional block by explicitly calling __syncwarp()."
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","5,295,542.86",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Instruction Statistics","Executed Instructions","inst","593,100,800",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","5,295,577.86",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Instruction Statistics","Issued Instructions","inst","593,104,720",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Launch Statistics","Block Size","","16",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Launch Statistics","Function Cache Configuration","","cudaFuncCachePreferNone",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Launch Statistics","Grid Size","","131,072",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Launch Statistics","Registers Per Thread","register/thread","40",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Launch Statistics","Shared Memory Configuration Size","Kbyte","16.38",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Launch Statistics","Threads","thread","2,097,152",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Launch Statistics","Waves Per SM","","292.57",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","LaunchStats","","","","LaunchConfiguration","WRN","Threads are executed in groups of 32 threads called warps. This kernel launch is configured to execute 16 threads per block. Consequently, some threads in a warp are masked off and those hardware resources are unused. Try changing the number of threads per block to be a multiple of 32 threads. Between 128 and 256 threads per block is a good initial range for experimentation. Use smaller thread blocks rather than one large thread block per multiprocessor if latency affects performance.  This is particularly beneficial to kernels that frequently call __syncthreads(). See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Occupancy","Block Limit SM","block","16",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Occupancy","Block Limit Registers","block","48",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Occupancy","Block Limit Shared Mem","block","16",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Occupancy","Block Limit Warps","block","48",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Occupancy","Theoretical Active Warps per SM","warp","16",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Occupancy","Theoretical Occupancy","%","33.33",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Occupancy","Achieved Occupancy","%","33.24",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Occupancy","Achieved Active Warps Per SM","warp","15.96",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (33.3%) is limited by the required amount of shared memory This kernel's theoretical occupancy (33.3%) is limited by the number of blocks that can fit on the SM See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Source Counters","Branch Instructions Ratio","%","0.02",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Source Counters","Branch Instructions","inst","9,568,256",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Source Counters","Branch Efficiency","%","100",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","7","Source Counters","Avg. Divergent Branches","","0",
"0","26901","program","127.0.0.1","MatMul(float *, float *, float *, int, int, int)","2025-May-15 08:37:04","1","1","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 268697600 excessive sectors (40% of the total 671612928 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
